# Simple deployment with Python HTTP server
FROM node:20-alpine as builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage - Use Python for simple HTTP server
FROM python:3.11-alpine

WORKDIR /app

# Copy built application
COPY --from=builder /app/dist ./

# Create a simple server script
RUN echo '#!/usr/bin/env python3' > server.py && \
    echo 'import http.server' >> server.py && \
    echo 'import socketserver' >> server.py && \
    echo 'import os' >> server.py && \
    echo 'from urllib.parse import urlparse' >> server.py && \
    echo '' >> server.py && \
    echo 'class SPAHandler(http.server.SimpleHTTPRequestHandler):' >> server.py && \
    echo '    def do_GET(self):' >> server.py && \
    echo '        path = urlparse(self.path).path' >> server.py && \
    echo '        if not os.path.exists("." + path) and not path.startswith("/assets/"):' >> server.py && \
    echo '            self.path = "/index.html"' >> server.py && \
    echo '        return super().do_GET()' >> server.py && \
    echo '' >> server.py && \
    echo 'PORT = int(os.environ.get("PORT", 8080))' >> server.py && \
    echo 'with socketserver.TCPServer(("", PORT), SPAHandler) as httpd:' >> server.py && \
    echo '    print(f"Server running on port {PORT}")' >> server.py && \
    echo '    httpd.serve_forever()' >> server.py && \
    chmod +x server.py

# Expose port
EXPOSE 8080

# Start the server
CMD ["python3", "server.py"]